name: Aeon Reccomendation System Backend Workflow

on:
  push:
    branches:
      - main  # Adjust the branch as necessary
  workflow_dispatch:
    inputs:
      change:
        description: "Details about the database change"
        required: false

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Log the trigger type
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "Triggered by a push to the repository."
          else
            echo "Triggered by a database change: ${{ github.event.inputs.change }}"
          fi

  model-deployment:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Data ingestion
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_USER:  ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASS:  ${{ secrets.POSTGRES_PASS }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: |
          python src/data_ingestion.py
      
      - name: Data validation
        run: |
          pytest test/test_data.py
      
      - name: Test Transformation functions
        run: | 
          pytest test/test_transformation.py
      
      - name: Data Transformation
        run: |
          python src/data_transformation.py
      
      - name: Generate objects
        run: |
          python src/vectorizer.py
      
      - name: Test objects
        run: |
          pytest test/test_objects.py

      - name: Login to AWS ECR
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 529088280615.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker image
        if: success()
        run: |
          docker build -t aeonbackendimg .

      - name: Tag Docker image
        if: success()
        run: |
          docker tag aeonbackendimg:latest 529088280615.dkr.ecr.us-east-1.amazonaws.com/aeonbackendimg:latest

      - name: Push Docker image to AWS ECR
        if: success()
        run: |
          docker push 529088280615.dkr.ecr.us-east-1.amazonaws.com/aeonbackendimg:latest

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy Docker image to EC2
        if: success()
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
                # Update and install docker
            sudo apt-get update -y
            sudo apt-get install -y docker.io curl unzip
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ubuntu
            
            # Install AWS CLI v2
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -o awscliv2.zip
            sudo ./aws/install --update
                    
            # Configure AWS credentials
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=us-east-1
            
            # Clean up existing containers safely
            if [ "$(sudo docker ps -aq -f name=aeonApp)" ]; then
              sudo docker rm -f $(sudo docker ps -aq -f name=aeonApp)
            fi
            
            # Clean up unused resources
            sudo docker system prune -af --volumes
            
            # Login to ECR
            aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 529088280615.dkr.ecr.us-east-1.amazonaws.com
            
            # Pull and run the new container
            sudo docker pull 529088280615.dkr.ecr.us-east-1.amazonaws.com/aeonbackendimg:latest
            
            sudo docker run -d -p 80:80 \
              --name aeonApp-$(date +%Y%m%d-%H%M%S) \
              529088280615.dkr.ecr.us-east-1.amazonaws.com/aeonbackendimg:latest
            
            # Verify deployment
            sudo docker ps | grep aeonApp

            rm -rf aws awscliv2.zip
          EOF